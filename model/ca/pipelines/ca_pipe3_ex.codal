/**
 * Codasip s.r.o.
 *
 * CONFIDENTIAL
 *
 * Copyright 2022 Codasip s.r.o.
 *
 * All Rights Reserved.
 *
 * NOTICE: All information contained in this file, is and shall remain the property of
 * Codasip s.r.o. and its suppliers, if any.
 *
 * The intellectual and technical concepts contained herein are confidential and proprietary to
 * Codasip s.r.o. and are protected by trade secret and copyright law.  In addition, elements of the
 * technical concepts may be patent pending.
 *
 * This file is part of the Codasip Studio product. No part of the Studio product, including this
 * file, may be use, copied, modified, or distributed except in accordance with the terms contained
 * in Codasip license agreement under which you obtained this file.
 *
 *  \file   ca_pipe3_ex.codal
 *  \author Codasip
 *  \date   09.02.2022
 *  \brief  cycle accurate model
 */

#include "ca_defines.hcodal"
#include "debug.hcodal"

// -------------------------------------------------------------------------------------------------
// Execute Stage
// -------------------------------------------------------------------------------------------------
event ex : pipeline(pipe.EXMEM)
{
    use alu_operate;
    use branch_operation;
    use memory_operation;
    use ex_output;

    semantics
    {

        // Develop a multiplexer for the ALU src1 operand using a switch stagement using the src1_sl
        // control signal provided by the IDEX pipeline register generated by the Instructionr decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_sl to build the complete name of input value for this switch statement?

        switch(r_idex_src1_sl) {
            case ALU_SRC1_SEL_RF:
                s_src1_operand = r_idex_rf_src1;
                break;
            case ALU_SRC1_EXMEM_DF:
                s_src1_operand = r_exmem_alu_result;  // data forwarding calculated while in EX stage
                break;
            case ALU_SRC1_MEMWB_DF:
                s_src1_operand = r_memwb_data_result;  // data forwarding calculated while in ME stage
                break;
            case ALU_SRC1_PC:
                s_src1_operand = r_idex_pc;
                break;
            case ALU_SRC1_SEL_ZERO:
                s_src1_operand = 0;
                break;
            case ALU_SRC1_SEL_FOUR:
                s_src1_operand = 4;
                break;
            default:
                break;
        }


        // Develop a multiplexer for the ALU src1 operand using a switch stagement using the src1_s2
        // control signal provided by the IDEX pipeline register generated by the Instructionr decoder
        // Hint:  Using the standard naming protocols for this project, what prefix would you add to
        // to src1_s2 to build the complete name of input value for this switch statement?

        switch(r_idex_src2_sl) {
            case ALU_SRC2_SEL_RF:
                s_src2_operand = r_idex_rf_src2;
                break;
            case ALU_SRC2_SEL_IMM:
                s_src2_operand = r_idex_src2_imm;
                break;
            case ALU_SRC2_PC:
                s_src2_operand = r_idex_pc;
                break;
            case ALU_SRC2_EXMEM_DF:
                s_src2_operand = r_exmem_alu_result;  // data forwarding calculated while in EX stage
                break;
            case ALU_SRC2_MEMWB_DF:
                s_src2_operand = r_memwb_data_result;  // data forwarding calculated while in ME stage
                break;
            default:
                break;
        }

        // HALT instruction detection used for simulation purposes until the load/store instructions
        // have been implemented
        if (r_idex_halt == true)
        {
            codasip_info(INFO_GENERAL, "Halt instruction indicated");
//            codasip_store_exit_code(rf_xpr[GPR_RETVAL] & 0xFF);
            #pragma simulator
            {
                codasip_halt();
            }

        }

        // If not a halt operation, call ALU routine
        alu_operate();

        // Calculate branch / jump address
        branch_operation();

        // Perform memory operation
        memory_operation();

        // Update the pipeline registers between the Execute (EX) and MEMORY (MEM) stages
        ex_output();
    };
};

event alu_operate : pipeline(pipe.EXMEM)
{
    semantics
    {
        // A switch statement will be used to determine and evaluate the ALU operation using
        // the aluop code provided by the IDEX pipeline register whose value is determined
        // by the instruction decoder

        switch(r_idex_aluop)
        {
            case ALU_NOP:
                s_ex_alu_result = 0;
                s_ex_branch_true = false;
                break;
            case ALU_ADD:
                s_ex_alu_result = s_src1_operand + s_src2_operand;
                s_ex_branch_true = false;
                break;
            case ALU_SUB:
                s_ex_alu_result = s_src1_operand - s_src2_operand;
                s_ex_branch_true = false;
                break;
            case ALU_SLL:
                s_ex_alu_result = s_src1_operand << (uint5) s_src2_operand;
                s_ex_branch_true = false;
                break;
            case ALU_SLT:
                if (((int32) s_src1_operand) < ((int32) s_src2_operand)) s_ex_alu_result = 1;
                else s_ex_alu_result = 0;
                s_ex_branch_true = s_ex_alu_result[0..0];           // Set if LT for branch BLT instruction
                break;
            case ALU_SLTU:
                if (((uint32)s_src1_operand) < ((uint32)s_src2_operand)) s_ex_alu_result = 1;
                else s_ex_alu_result = 0;
                s_ex_branch_true = s_ex_alu_result[0..0];           // Set if LTU for branch BLTU instruction
                break;
            case ALU_XOR:
                s_ex_alu_result = s_src1_operand ^ s_src2_operand;
                s_ex_branch_true = false;
                break;
            case ALU_SRL:
                s_ex_alu_result = s_src1_operand >> (uint5)s_src2_operand;
                s_ex_branch_true = false;
                break;
            case ALU_SRA:
                s_ex_alu_result = (int32)s_src1_operand >> (uint5)s_src2_operand;
                s_ex_branch_true = false;
                break;
            case ALU_OR:
                s_ex_alu_result = s_src1_operand | s_src2_operand;
                s_ex_branch_true = false;
                break;
            case ALU_AND:
                s_ex_alu_result = s_src1_operand & s_src2_operand;
                s_ex_branch_true = false;
                break;
            case ALU_BEQ:
                s_ex_alu_result = DONT_CARE;
                s_ex_branch_true = ((int32) s_src1_operand == (int32) s_src2_operand) ? true : false;
                break;
            case ALU_BNE:
                s_ex_alu_result = DONT_CARE;
                s_ex_branch_true = ((int32) s_src1_operand != (int32) s_src2_operand) ? true : false;
                break;
            case ALU_BGE:
                s_ex_alu_result = DONT_CARE;
                s_ex_branch_true = ((int32) s_src1_operand >= (int32) s_src2_operand) ? true : false;
                break;
            case ALU_BGEU:
                s_ex_alu_result = DONT_CARE;
                s_ex_branch_true = ((uint32) s_src1_operand >= (uint32) s_src2_operand) ? true : false;
                break;
            default:
                s_ex_alu_result = 0;
                s_ex_branch_true = false;
                codasip_fatal(ALU_ERROR, "ALU DEFAULT case: %d\n", r_idex_aluop);
                break;
        }
    };
};

event branch_operation : pipeline(pipe.EXMEM)
{
    semantics
    {
        int32 jump_reg_value;

        // Determine where to access register value for jump address calucation
        switch (r_idex_jump_df_mux)
        {
            case BRANCH_PC:
                jump_reg_value = r_idex_pc;
                break;
            case JUMP_SRC1_RF:
                jump_reg_value = r_idex_rf_src1;
                break;
            case JUMP_SRC1_EXMEM_DF:
                jump_reg_value = r_exmem_alu_result;
                break;
            case JUMP_SRC1_MEMWB_DF:
                jump_reg_value = r_memwb_data_result;
                break;
            default:
                jump_reg_value = r_idex_rf_src1;
                break;
        }

        // For compressed format, 16-bit instruction are half-word aligned, lower address bit must be 0
        // to be half-word aligned.  This project implementation is strictly 32-bit, lower two bits must
        // be 0 for 4-byte aligned, but the RISCV specification states the address to be masked with ~0x1
        s_ex_branch_addr = (jump_reg_value + r_idex_src2_imm) & ~0x1;


    };
};

event memory_operation : pipeline(pipe.EXMEM)
{

    semantics
    {
        uint1 op_rw;
        uint2 op_type;
        uint32 store_data;
        uint4 cache_hprot;

        // A mux created with an if/else if/else statement using the data hazard values from the ID stage
        if (r_idex_src2_ex_hz) store_data = r_exmem_alu_result;
        else if (r_idex_src2_mem_hz) store_data = r_memwb_data_result;
        else store_data = r_idex_rf_src2;

        if (s_me_take_branch || s_syscall_stall) {
            s_ex_mem_size = DONT_CARE;
            op_rw   = DONT_CARE;
            op_type = CP_AHB_IDLE;
        } else
        {
            switch (r_idex_mem_ops) {
                case MEM_NOP:
                    s_ex_mem_size = DONT_CARE;
                    op_rw   = DONT_CARE;
                    op_type = CP_AHB_IDLE;
                    break;
                case MEM_LW:
                    s_ex_mem_size = CP_AHB_SIZE_32;
                    op_rw   = CP_AHB_READ;
                    op_type = CP_AHB_NONSEQ;
                    break;
                case MEM_LH:
                case MEM_LHU:
                    s_ex_mem_size = CP_AHB_SIZE_16;
                    op_rw   = CP_AHB_READ;
                    op_type = CP_AHB_NONSEQ;
                    break;
                case MEM_LB:
                case MEM_LBU:
                    s_ex_mem_size = CP_AHB_SIZE_8;
                    op_rw   = CP_AHB_READ;
                    op_type = CP_AHB_NONSEQ;
                    break;
                case MEM_SW:
                    s_ex_mem_size = CP_AHB_SIZE_32;
                    op_rw   = CP_AHB_WRITE;
                    op_type = CP_AHB_NONSEQ;
                    break;
                case MEM_SH:
                    s_ex_mem_size = CP_AHB_SIZE_16;
                    op_rw   = CP_AHB_WRITE;
                    op_type = CP_AHB_NONSEQ;
                    break;
                case MEM_SB:
                    s_ex_mem_size = CP_AHB_SIZE_8;
                    op_rw   = CP_AHB_WRITE;
                    op_type = CP_AHB_NONSEQ;
                    break;
                default:
                    s_ex_mem_size = DONT_CARE;
                    op_rw   = DONT_CARE;
                    op_type = DONT_CARE;
                    codasip_fatal(ALU_ERROR, "MEM OPS DEFAULT case: %d\n", r_idex_mem_ops);
                    break;
            }
        }

        // Perform the store operation or request a load operation or bus idle

        cache_hprot = pma_hprot(s_ex_alu_result[31 .. 2] :: (uint2)0, CP_AHB_DATA_ACCESS);
//        idcache.if_dcache.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu_result, s_ex_mem_size);
#ifdef OPTION_CACHES_ENABLED
        idcache.if_dcache.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu_result, s_ex_mem_size, cache_hprot, CP_AHB_UNLOCK);
//        idcache.if_dcache.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu_result, s_ex_mem_size, CP_AHB_CACHEABLE, CP_AHB_UNLOCK, CP_AHB_SINGLE);
        s_ex_mem_encodeddata = idcache.if_dcache.encode_data(store_data, s_ex_alu_result, s_ex_mem_size);
#else
        ldst.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu_result, s_ex_mem_size, cache_hprot, CP_AHB_UNLOCK);
//        idcache.if_dcache.transport(CP_PHS_ADDRESS, op_type, op_rw, s_ex_alu_result, s_ex_mem_size, CP_AHB_CACHEABLE, CP_AHB_UNLOCK, CP_AHB_SINGLE);
        s_ex_mem_encodeddata = ldst.encode_data(store_data, s_ex_alu_result, s_ex_mem_size);
#endif
    };
};

event ex_output : pipeline(pipe.EXMEM)
{
    semantics
    {
        // Store the ALU result to the EXMEM pipeline register
        r_exmem_alu_result     = s_ex_alu_result;

        // Passing control signals to the next stage, MEM, through the EXMEM pipeline register.  These
        // signals are being passed from the IDEX pipeline to the EXMEM pipeline.
        //
        // Assign the proper IDEX pipeline register to the following EXMEM pipeline registers
        r_exmem_rd             = r_idex_rd;
        r_exmem_regwrite       = r_idex_regwrite;
        r_exmem_branch_inst    = r_idex_branch_inst;
        r_exmem_branch_true    = s_ex_branch_true;
        r_exmem_branch_addr    = s_ex_branch_addr;
        r_exmem_jump_inst      = r_idex_jump_inst;
        r_exmem_memread        = r_idex_memread;
        r_exmem_mem_ops        = r_idex_mem_ops;
        r_exmem_mem_encodeddata = s_ex_mem_encodeddata;
        r_exmem_mem_size       = s_ex_mem_size;
    };
};

